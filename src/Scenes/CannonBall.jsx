/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import {
  RigidBody,
  Physics,
  CuboidCollider,
  InstancedRigidBodies,
} from "@react-three/rapier";
import { useUnmountEffect } from "framer-motion";
import useWindowDimensions from "../Hooks/windowDimentions";
import { render } from "react-dom";

export default function CannonBall({ mouseX, mouseY, cameraposition }) {
  const { nodes, materials } = useGLTF(
    "https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/cannon-ball/model.gltf"
  );
  const ballRef = useRef();

  useEffect(() => {
    console.log("is happening");
    ballRef.current.applyImpulse(
      { x: (mouseX - width / 2) / 10, y: mouseY / height, z: -5 },
      false
    );
    applyImpulse();
  }, []);
  const { height, width } = useWindowDimensions();
  function applyImpulse() {
    ballRef.current.applyImpulse(
      { x: (mouseX - width / 2) / 10, y: mouseY / height, z: -5 },
      true
    );
  }

  return (
    <>
      <Html>
        <button
          style={{ color: "blue", position: "fixed", top: -500, left: 700 }}
          onClick={applyImpulse}
        >
          Click
        </button>
      </Html>
      <RigidBody
        canSleep={false}
        ref={ballRef}
        name={Math.random()}
        type="Dynamic"
        colliders={"ball"}
        mass={2}
        restitution={0.2}
        friction={10}
        linearDamping={1}
        angularDamping={1}
      >
        <mesh castShadow position={[-1.5, 2, 0]}>
          <sphereGeometry onClick={applyImpulse} />
          <meshNormalMaterial color="orange" />
        </mesh>
      </RigidBody>

      {/* <RigidBody  colliders={false} >
    <mesh castShadow rotation-x={Math.PI * 0.5} position={[0,1,0]}>
        <torusGeometry args={[1,0.5,16,32]} />
        <meshBasicMaterial color={'mediumpurple'} />
    </mesh>
</RigidBody> */}
      {/* <RigidBody
          position={[1.5, 2, 0]}
          ref={cube}
          restitution={0}
          colliders={false}
          onCollisionEnter={collisionEnter}
        >
          <CuboidCollider args={[0.5, 0.5, 0.5]} mass={0.5} />
          <mesh castShadow onClick={cubeJump}>
            <boxGeometry />
            <meshStandardMaterial color={"mediumpurple"} />
          </mesh>
        </RigidBody> */}

      {/* <RigidBody position={[0,4,0]} colliders={false} >
            <CylinderCollider args={[0.5, 1.25]}/>
          <primitive object={hamburger.scene} scale={0.25}/>
        </RigidBody> */}
    </>
  );
}

useGLTF.preload(
  "https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/cannon-ball/model.gltf"
);
